#!/usr/bin/env python
"""Run all commands extracted from environment variables when they should."""

from __future__ import unicode_literals

import logging
import re
import smtplib
import sys
from datetime import UTC, datetime
from email.mime.text import MIMEText
from email.utils import formatdate
from os import environ, path
from socket import getfqdn
from string import Template
from subprocess import STDOUT, CalledProcessError, check_output
from uuid import uuid4

import requests

logging.basicConfig(level=logging.INFO)
logging.root.name = "jobrunner"


# Get expected periodicity from this script's placement
periodicity = path.basename(path.dirname(path.abspath(__file__)))
logging.info("%s UTC - Running %s jobs", datetime.now(UTC), periodicity)
# Get email settings
smtp_host = environ.get("SMTP_HOST")
smtp_port = environ.get("SMTP_PORT")
smtp_user = environ.get("SMTP_USER")
smtp_pass = environ.get("SMTP_PASS", "")
smtp_tls = environ.get("SMTP_TLS", "").lower() in {"1", "true"}
smtp_report_success = environ.get("SMTP_REPORT_SUCCESS").lower() in {"1", "true"}
from_ = environ.get("EMAIL_FROM")
to = environ.get("EMAIL_TO")
subject = environ.get("EMAIL_SUBJECT")
healthchecks_request_timeout = 5

# Get the commands we need to run
to_run = {}
for key, when in environ.items():
    match = re.match(r"^JOB_(\d+)_WHEN$", key)
    if match and periodicity in when.split():
        njob = int(match.group(1))
        to_run[njob] = environ["JOB_{}_WHAT".format(njob)]


if not to_run:
    logging.info("Nothing to do")
    sys.exit()

# Run commands in order
message = []
failed = False
for njob, command in sorted(to_run.items()):
    expanded_command = Template(command).safe_substitute(environ)
    start = datetime.now()
    logging.info("Running job %d: `%s`", njob, expanded_command)
    healthchecks_url_env = environ.get(
        f"JOB_{njob}_{periodicity.upper()}_HEALTHCHECKS_URL"
    ) or environ.get(f"JOB_{njob}_HEALTHCHECKS_URL")
    if healthchecks_url_env is not None:
        healthchecks_rid = str(uuid4())
        message += [f"Pinging {healthchecks_url_env}/start"]
        logging.info(message[-1])
        try:
            requests.get(
                f"{healthchecks_url_env}/start",
                params={"rid": healthchecks_rid},
                timeout=healthchecks_request_timeout,
            )
        except (
            requests.exceptions.ConnectionError,
            requests.exceptions.Timeout,
        ):
            message += ["Failed to send healtchecks start request"]
            logging.exception(message[-1])

    try:
        result = check_output(expanded_command, stderr=STDOUT, shell=True, text=True)
        success = True
    except CalledProcessError as error:
        failed = True
        success = False
        result = str(error) + "\n" + error.output
        logging.exception("Failed!")
    end = datetime.now()
    log = [
        "",
        "===================================",
        "Job {}: `{}`".format(njob, expanded_command),
        "Started: {!s}".format(start),
        "Finished: {!s}".format(end),
        "Success: {!s}".format(success),
        "",
        result,
    ]
    logging.log(logging.INFO if success else logging.ERROR, "\n".join(log))
    message += log

    if healthchecks_url_env is not None:
        request_url = (
            f"{healthchecks_url_env}/fail" if failed else f"{healthchecks_url_env}"
        )
        message += [f"Pinging {request_url}"]
        logging.info(message[-1])
        try:
            requests.get(
                request_url,
                params={"rid": healthchecks_rid},
                timeout=healthchecks_request_timeout,
            )
        except (
            requests.exceptions.ConnectionError,
            requests.exceptions.Timeout,
        ):
            message += ["Failed to send healthchecks finished request"]
            logging.exception(message[-1])

    uptime_kuma_url_env = environ.get(
        f"JOB_{njob}_{periodicity.upper()}_UPTIME_KUMA_URL"
    ) or environ.get(f"JOB_{njob}_UPTIME_KUMA_URL")
    if uptime_kuma_url_env is not None:
        # Remove any query params in the URL, since the uptime-kuma interface includes them by default
        if "?" in uptime_kuma_url_env:
            uptime_kuma_url_env = uptime_kuma_url_env[: uptime_kuma_url_env.find("?")]

        if failed:
            status = "down"
            msg = result
        else:
            status = "up"
            msg = "ok"
        try:
            message += [f"Pinging {uptime_kuma_url_env}"]
            logging.info(message[-1])
            requests.get(
                f"{uptime_kuma_url_env}",
                params={"status": status, "msg": msg},
                timeout=healthchecks_request_timeout,
            )
        except (
            requests.exceptions.ConnectionError,
            requests.exceptions.Timeout,
        ):
            message += ["Failed to send uptime kuma ping request"]
            logging.exception(message[-1])

# Report results
if all((smtp_report_success or failed, smtp_host, smtp_port, from_, to, subject)):
    logging.info("Sending email report")
    smtp = None
    try:
        if smtp_tls:
            smtp = smtplib.SMTP_SSL(smtp_host, smtp_port)
        else:
            smtp = smtplib.SMTP(smtp_host, smtp_port)
        if smtp_user:
            smtp.ehlo()
            # If we can encrypt this session, do it
            if smtp.has_extn("STARTTLS"):
                smtp.starttls()
                smtp.ehlo()  # re-identify ourselves over TLS connection
            smtp.login(smtp_user, smtp_pass)
        message_text_obj = MIMEText("\r\n".join(message), "plain", "utf-8")
        message_text_obj["Subject"] = subject.format(
            hostname=getfqdn(),
            periodicity=periodicity,
            result="ERROR" if failed else "OK",
        )
        message_text_obj["From"] = from_
        message_text_obj["To"] = to
        message_text_obj["Date"] = formatdate()
        smtp.send_message(message_text_obj)
    except Exception:
        logging.exception("Failed sending email")
    finally:
        if smtp is not None:
            smtp.quit()
else:
    logging.info("Finished")

if failed:
    sys.exit("At least one job failed")
